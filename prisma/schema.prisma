//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Tag {
  id             String        @id() @default(uuid())
  name           String
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  documentTags   DocumentTag[] @relation("tag")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model EmailList {
  id             String          @id() @default(uuid())
  name           String
  description    String?
  organizationId String
  organization   Organization?   @relation(fields: [organizationId], references: [id], name: "organization")
  emailListUsers EmailListUser[] @relation("emailList")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model DocumentTemplate {
  id             String        @id() @default(uuid())
  name           String
  description    String?
  contentUrl     String?
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Document {
  id               String            @id() @default(uuid())
  name             String
  description      String?
  userId           String
  user             User?             @relation(fields: [userId], references: [id], name: "user")
  organizationId   String
  organization     Organization?     @relation(fields: [organizationId], references: [id], name: "organization")
  documentVersions DocumentVersion[] @relation("document")
  documentRequests DocumentRequest[] @relation("document")
  documentTags     DocumentTag[]     @relation("document")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt()
}

/// @@allow('all', true)
model DocumentVersion {
  id            String       @id() @default(uuid())
  versionNumber Float
  contentUrl    String?
  documentId    String
  document      Document?    @relation(fields: [documentId], references: [id], name: "document")
  validations   Validation[] @relation("documentVersion")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model DocumentRequest {
  id         String    @id() @default(uuid())
  status     String
  userId     String
  user       User?     @relation(fields: [userId], references: [id], name: "user")
  documentId String
  document   Document? @relation(fields: [documentId], references: [id], name: "document")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Validation {
  id                String           @id() @default(uuid())
  status            String
  comment           String?
  userId            String
  user              User?            @relation(fields: [userId], references: [id], name: "user")
  documentVersionId String
  documentVersion   DocumentVersion? @relation(fields: [documentVersionId], references: [id], name: "documentVersion")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt()
}

/// @@allow('all', true)
model DocumentTag {
  id         String    @id() @default(uuid())
  documentId String
  document   Document? @relation(fields: [documentId], references: [id], name: "document")
  tagId      String
  tag        Tag?      @relation(fields: [tagId], references: [id], name: "tag")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model EmailListUser {
  id          String     @id() @default(uuid())
  emailListId String
  emailList   EmailList? @relation(fields: [emailListId], references: [id], name: "emailList")
  userId      String
  user        User?      @relation(fields: [userId], references: [id], name: "user")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id                String             @id() @default(uuid())
  name              String
  pictureUrl        String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId  String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  roles             OrganizationRole[]
  tags              Tag[]              @relation("organization")
  emailLists        EmailList[]        @relation("organization")
  documentTemplates DocumentTemplate[] @relation("organization")
  documents         Document[]         @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  emailVerified     Boolean?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  accounts          Account[]
  sessions          Session[]
  organizationRoles OrganizationRole[]
  pushNotifications PushNotification[] @relation("user")
  documents         Document[]         @relation("user")
  documentRequests  DocumentRequest[]  @relation("user")
  validations       Validation[]       @relation("user")
  emailListUsers    EmailListUser[]    @relation("user")
}

/// @@allow('all', true)
model PushNotification {
  id           String   @id() @default(uuid())
  endpoint     String
  subscription String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
  userId       String
  user         User     @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('create,read,update,delete', auth() == user)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text()
  access_token             String? @db.Text()
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text()
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// @@allow('create,read,update,delete', auth() == user)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
